From 348ce2459db9d9f6f4479144f19205784c3333b1 Mon Sep 17 00:00:00 2001
From: Terry Denney <terry.denney@tasktop.com>
Date: Tue, 27 Sep 2011 16:24:11 -0700
Subject: [PATCH] Add debug support - fix debug mode in cloudApplication

---
 .../cloudfoundry/client/lib/CloudApplication.java  |   21 +++++++++++++++++++-
 .../client/lib/CloudFoundryClient.java             |   21 ++++++++++++++++---
 .../org/cloudfoundry/client/lib/CloudInfo.java     |   15 +++++++++++++-
 .../org/cloudfoundry/client/lib/InstanceInfo.java  |   12 +++++++++++
 4 files changed, 63 insertions(+), 6 deletions(-)

diff --git a/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudApplication.java b/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudApplication.java
index dfe37db..751b577 100644
--- a/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudApplication.java
+++ b/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudApplication.java
@@ -28,6 +28,7 @@ public class CloudApplication {
 	private List<String> uris;
 	private List<String> services;
 	private AppState state;
+	private String debug;
 	private Map<String, Object> meta = new HashMap<String, Object>();
 	private Map<String, Integer> resources = new HashMap<String, Integer>();
 	private int runningInstances;
@@ -70,11 +71,21 @@ public class CloudApplication {
 		meta = (Map<String, Object>) attributes.get("meta");
 		resources = (Map<String, Integer>) attributes.get("resources");
 		env = (List<String>) attributes.get("env");
+		
+		String debugAttribute = (String) attributes.get("debug");
+		if (debugAttribute != null) {
+			debug = debugAttribute;
+		}
 	}
 
 	public enum AppState {
 		UPDATING, STARTED, STOPPED
 	}
+	
+	public enum DebugMode {
+		run, 
+		wait
+	}
 
 	public String getName() {
 		return name;
@@ -131,6 +142,14 @@ public class CloudApplication {
 	public void setState(AppState state) {
 		this.state = state;
 	}
+	
+	public String getDebug() {
+		return debug;
+	}
+	
+	public void setDebug(String debug) {
+		this.debug = debug;
+	}
 
 	public Map<String, Object> getMeta() {
 		return meta;
@@ -182,7 +201,7 @@ public class CloudApplication {
 		return "CloudApplication [stagingModel=" + staging.get(MODEL_KEY) + ", instances="
 				+ instances + ", name=" + name + ", stagingStack=" + staging.get(STACK_KEY)
 				+ ", memory=" + resources.get(MEMORY_KEY)
-				+ ", state=" + state + ", uris=" + uris + ",services=" + services
+				+ ", state=" + state + ", debug=" + debug + ", uris=" + uris + ",services=" + services
 				+ ", env=" + env + "]";
 	}
 }
diff --git a/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudFoundryClient.java b/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudFoundryClient.java
index ce14bb6..54c71dc 100644
--- a/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudFoundryClient.java
+++ b/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudFoundryClient.java
@@ -41,6 +41,7 @@ import java.util.zip.ZipFile;
 import java.util.zip.ZipOutputStream;
 
 import org.cloudfoundry.client.lib.CloudApplication.AppState;
+import org.cloudfoundry.client.lib.CloudApplication.DebugMode;
 import org.codehaus.jackson.JsonParseException;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.springframework.core.io.Resource;
@@ -329,6 +330,7 @@ public class CloudFoundryClient {
 			if (callback != null) callback.onMatchedFileNames(matchedFileNames);
 
 			byte[] incrementalUpload = processMatchedResources(archive, matchedFileNames);
+			
 			if (callback != null) callback.onProcessMatchedResources(incrementalUpload.length);
 
 			ObjectMapper objectMapper = new ObjectMapper();
@@ -367,6 +369,13 @@ public class CloudFoundryClient {
 		app.setState(AppState.STARTED);
 		updateApplication(app);
 	}
+	
+	public void debugApplication(String appName, String mode) {
+		CloudApplication app = getApplication(appName);
+		app.setState(AppState.STARTED);
+		app.setDebug(mode);
+		updateApplication(app);
+	}
 
 	public void stopApplication(String appName) {
 		CloudApplication app = getApplication(appName);
@@ -621,15 +630,18 @@ public class CloudFoundryClient {
 		return hex.toString();
 	}
 
-	private byte[] processMatchedResources(ZipFile archive, Set<String> matchedFileNames)
+	byte[] processMatchedResources(ZipFile archive, Set<String> matchedFileNames)
 				throws IOException {
 		ByteArrayOutputStream out = new ByteArrayOutputStream();
-		ZipOutputStream zout = new ZipOutputStream(out);
+		ZipOutputStream zout = null;
 
 		Enumeration<? extends ZipEntry> entries = archive.entries();
 		while (entries.hasMoreElements()) {
 			ZipEntry entry = entries.nextElement();
 			if (!matchedFileNames.contains(entry.getName())) {
+				if (zout == null) {
+					zout = new ZipOutputStream(out);
+				}
 				zout.putNextEntry(new ZipEntry(entry.getName()));
 				if (!entry.isDirectory()) {
 					InputStream in = archive.getInputStream(entry);
@@ -646,8 +658,9 @@ public class CloudFoundryClient {
 				zout.closeEntry();
 			}
 		}
-		zout.close();
-
+		if (zout != null) {
+			zout.close();
+		} 
 		return out.toByteArray();
 	}
 
diff --git a/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudInfo.java b/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudInfo.java
index bfd5526..cb3bb43 100644
--- a/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudInfo.java
+++ b/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/CloudInfo.java
@@ -32,6 +32,7 @@ public class CloudInfo {
 	private String version;
 	private String user;
 	private String description;
+	private boolean allowDebug;
 	private Collection<Framework> frameworks = new ArrayList<Framework>();
 	private Map<String, Runtime> runtimes = new HashMap<String, CloudInfo.Runtime>();
 
@@ -43,6 +44,13 @@ public class CloudInfo {
 		version = CloudUtil.parse(String.class, infoMap.get("version"));
 		user = CloudUtil.parse(String.class, infoMap.get("user"));
 		description = CloudUtil.parse(String.class, infoMap.get("description"));
+		
+		Object allowDebugValue = infoMap.get("allow_debug");
+		if (allowDebugValue != null) {
+			allowDebug = CloudUtil.parse(Boolean.class, allowDebugValue);
+		} else {
+			allowDebugValue = false; // default to false
+		}
 
 		Map<String, Object> limitsMap = CloudUtil.parse(Map.class, infoMap.get("limits"));
 		if (limitsMap != null) {
@@ -73,7 +81,7 @@ public class CloudInfo {
 	}
 
 	public CloudInfo(String name, String support, int build, String version,
-			String user, String description, Limits limits, Usage usage) {
+			String user, String description, Limits limits, Usage usage, boolean allowDebug) {
 		this.name = name;
 		this.support = support;
 		this.build = build;
@@ -82,6 +90,7 @@ public class CloudInfo {
 		this.description = description;
 		this.limits = limits;
 		this.usage = usage;
+		this.allowDebug = allowDebug;
 	}
 
 	public Limits getLimits() {
@@ -115,6 +124,10 @@ public class CloudInfo {
 	public String getVersion() {
 		return version;
 	}
+	
+	public boolean getAllowDebug() {
+		return allowDebug;
+	}
 
 	public Collection<Framework> getFrameworks() {
 		return Collections.unmodifiableCollection(frameworks);
diff --git a/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/InstanceInfo.java b/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/InstanceInfo.java
index 6e6a61a..9fdf87b 100644
--- a/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/InstanceInfo.java
+++ b/cloudfoundry-client-lib/src/main/java/org/cloudfoundry/client/lib/InstanceInfo.java
@@ -23,11 +23,15 @@ public class InstanceInfo {
 	private final Date since;
 	private final int index;
 	private final String state; // TODO make enum, need to know the valid values
+	private final String debugIp;
+	private final int debugPort;
 
 	public InstanceInfo(Map<String, Object> infoMap) {
 		since = new Date(CloudUtil.parse(Long.class, infoMap.get("since")) * 1000);
 		index = CloudUtil.parse(Integer.class, infoMap.get("index"));
 		state = CloudUtil.parse(String.class, infoMap.get("state"));
+		debugIp = CloudUtil.parse(String.class, infoMap.get("debug_ip"));
+		debugPort = CloudUtil.parse(Integer.class, infoMap.get("debug_port"));
 	}
 
 	public Date getSince() {
@@ -41,4 +45,12 @@ public class InstanceInfo {
 	public String getState() {
 		return state;
 	}
+	
+	public String getDebugIp() {
+		return debugIp;
+	}
+	
+	public int getDebugPort() {
+		return debugPort;
+	}
 }
-- 
1.7.4.msysgit.0

